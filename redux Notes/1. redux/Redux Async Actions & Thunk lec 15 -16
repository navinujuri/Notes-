const redux = require('redux')
const thunkMiddleware = require('redux-thunk').default
const axios = require('axios')
const createStore = redux.createStore
const applyMiddleware = redux.applyMiddleware

const initialState = {
  loading: false,
  users: [],
  error: ''
}

const FETCH_USERS_REQUESTED = 'FETCH_USERS_REQUESTED'
const FETCH_USERS_SUCCEEDED = 'FETCH_USERS_SUCCEEDED'
const FETCH_USERS_FAILED = 'FETCH_USERS_FAILED'

const fetchUsersRequest = () => {
  return {
    type: FETCH_USERS_REQUESTED
  }
}

const fetchUsersSuccess = users => {
  return {
    type: FETCH_USERS_SUCCEEDED,
    payload: users
  }
}

const fetchUsersFailure = error => {
  return {
    type: FETCH_USERS_FAILED,
    payload: error
  }
}

/*IMP : store.dispatch(orderCake()) By default dispatch() takes action obj only as argument and whenever we call dispatch method it means we are sending
action object to reducer and immediatly reducer logic gets implimented based upon type of action. 
1.But if we use function as argument that means we are NOT calling reducer logic immediately and we want to do side effects (API/async tasks/ FS etc) then call redcuder logic.
to make this possible we use redux-thunk.
***2.Redux Thunk then executes this function, passing dispatch and getState as arguments.

ex: const fetchData = () => {
  return (dispatch, getState) => {
    // Accessing the current state
    const currentState = getState();

    // Dispatching an action to indicate data fetch started
    dispatch({ type: 'FETCH_DATA_REQUEST' });

    // Making an asynchronous call (e.g., fetching data from an API)
    axios.get('https://api.example.com/data')
      .then(response => {
        // Dispatching an action with the fetched data
        dispatch({ type: 'FETCH_DATA_SUCCESS', payload: response.data });
      })
      .catch(error => {
        // Dispatching an action to handle errors
        dispatch({ type: 'FETCH_DATA_FAILURE', payload: error.message });
      });
  };
};

*/
const fetchUsers = () => {
  return function (dispatch) {
    dispatch(fetchUsersRequest())
    axios
      .get('https://jsonplaceholder.typicode.com/users')
      .then(response => {
        // response.data is the users
        const users = response.data.map(user => user.id)
        dispatch(fetchUsersSuccess(users))
      })
      .catch(error => {
        // error.message is the error message
        dispatch(fetchUsersFailure(error.message))
      })
  }
}

const reducer = (state = initialState, action) => {
  console.log(action.type)
  switch (action.type) {
    case FETCH_USERS_REQUESTED:
      return {
        ...state,
        loading: true
      }
    case FETCH_USERS_SUCCEEDED:
      return {
        loading: false,
        users: action.payload,
        error: ''
      }
    case FETCH_USERS_FAILED:
      return {
        loading: false,
        users: [],
        error: action.payload
      }
  }
}

const store = createStore(reducer, applyMiddleware(thunkMiddleware))
store.subscribe(() => {
  console.log(store.getState())
})
store.dispatch(fetchUsers())
