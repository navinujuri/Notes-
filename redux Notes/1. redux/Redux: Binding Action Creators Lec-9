// Binding Action Creators

const redux = require('redux')


const createStore = redux.createStore
const bindActionCreators = redux.bindActionCreators

const CAKE_ORDERED = 'CAKE_ORDERED'


function orderCake(qty = 1) {
  return {
    type: CAKE_ORDERED,
    payload: qty
  }
}


const initialCakeState = {
  numOfCakes: 10
}

//State(initialCakeState) Linked to Reducer function.NOTE :  at this step still store is NOT CREATED yet
// reducer takes Action and Performs Logic. Its upto us what we Return
const cakeReducer = (state = initialCakeState, action) => {
  switch (action.type) {
    case CAKE_ORDERED:
      return {
        ...state,
        numOfCakes: state.numOfCakes - 1
      }
  
    default:
      return state
  }
}


// creation of redux store  with Linking of an reducer(cakeReducer) which already has a State(initialCakeState) Linked to it. 
const store = createStore(cakeReducer)

console.log('Initial State ', store.getState())

//Attaching Listner to Store ie if at all any change in State in Store it can perform some task/log.
const unsubscribe = store.subscribe(() => {
  console.log('Updated State ', store.getState())
})




//=============================
//New way of doing

// # store.dispatch(orderCake())
// # store.dispatch(orderCake())
// # store.dispatch(orderCake())
const actions = bindActionCreators(
  { orderCake, restockCake },
  store.dispatch
)
actions.orderCake()
actions.orderCake()
actions.orderCake()
actions.restockCake(3)

//==================================





//Removal of Listener
unsubscribe()


//NOTE : Removal of Listener on store doesnt mean Store is shutdown. you can still make changes on State in the Store.
store.dispatch(orderCake())

console.log('Initial State after removal of Listener', store.getState())

/* Output
Initial State  { numOfCakes: 10 }

Updated State  { numOfCakes: 9 }
Updated State  { numOfCakes: 8 }
Updated State  { numOfCakes: 7 }

Initial State after removal of Listener { numOfCakes: 6 }
*/
